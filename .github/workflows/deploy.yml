name: Build and Deploy to EKS
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: zad-dev-ecr
  EKS_CLUSTER_NAME: zad-eks-dev
  EKS_NAMESPACE: zad-demo-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn test
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Generate unique tag
      id: tag
      run: echo "tag=$(date +%Y%m%d-%H%M%S)-${{ github.sha }}" >> $GITHUB_OUTPUT
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
      
    - name: Deploy to EKS
      run: |
        # Update the deployment with new image tag
        kubectl set image deployment/hello-world-app hello-world=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n ${{ env.EKS_NAMESPACE }} --record
        
        # Wait for rollout to complete
        kubectl rollout status deployment/hello-world-app -n ${{ env.EKS_NAMESPACE }}
        
    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.EKS_NAMESPACE }} -l app=hello-world-app
        kubectl get deployment hello-world-app -n ${{ env.EKS_NAMESPACE }}
